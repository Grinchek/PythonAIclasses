###################### Classwork #########################

# import cv2
# from ultralytics import YOLO

# imagepath = "2.jpg"

# img = cv2.imread(imagepath)

# print("This image can be readed")

# model = YOLO("yolov8n.pt")

# results= model.predict(source = imagepath, conf=0.25)

# result_martix = results[0].plot()

# cv2.imshow("Result cnowing of objects", result_martix)

# cv2.waitKey(0)

# cv2.destroyAllWindows()
###################### Classwork #########################
###################### Homework video recognizing #########################
# import cv2
# import os
# from ultralytics import YOLO

# # === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
# video_path = "video.mp4"     # —à–ª—è—Ö –¥–æ –≤—ñ–¥–µ–æ
# output_folder = "images"     # –∫—É–¥–∏ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –∫–∞–¥—Ä–∏
# model_path = "yolov8n.pt"    # –º–æ–¥–µ–ª—å
# conf_threshold = 0.25        # –ø–æ—Ä—ñ–≥ —É–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ

# # === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ===
# os.makedirs(output_folder, exist_ok=True)
# model = YOLO(model_path)
# cap = cv2.VideoCapture(video_path)
# frame_count = 0
# saved_count = 0

# # === –û–±—Ä–æ–±–∫–∞ ===
# while True:
#     ret, frame = cap.read()
#     if not ret:
#         break

#     frame_count += 1
#     results = model.predict(frame, conf=conf_threshold, verbose=False)
#     annotated = results[0].plot()

#     # –Ø–∫—â–æ –æ–±‚Äô—î–∫—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–∞–¥—Ä
#     if len(results[0].boxes) > 0:
#         filename = f"frame_{frame_count:05d}.jpg"
#         save_path = os.path.join(output_folder, filename)
#         cv2.imwrite(save_path, annotated)
#         saved_count += 1

#     cv2.imshow("Detection", annotated)
#     if cv2.waitKey(1) & 0xFF == ord('q'):
#         break

# cap.release()
# cv2.destroyAllWindows()

# print(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ –∫–∞–¥—Ä—ñ–≤: {frame_count}")
# print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –∫–∞–¥—Ä—ñ–≤ —ñ–∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–º–∏ –æ–±'—î–∫—Ç–∞–º–∏: {saved_count}")
# print(f"üìÇ –£—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {os.path.abspath(output_folder)}")
###################### Homework video recognizing #########################

###################### Homework machine learning #########################
import argparse
import os
from pathlib import Path
from ultralytics import YOLO
from dotenv import load_dotenv

# -------- Helpers --------
def try_download_with_roboflow(api_key, workspace, project, version, split="yolov8"):
    from roboflow import Roboflow  # –≤–∏–º–∞–≥–∞—Ç–∏–º–µ pip install roboflow
    rf = Roboflow(api_key=api_key)
    proj = rf.workspace(workspace).project(project)
    ver = proj.version(int(version))
    dataset = ver.download(split)      # —Å—Ç–≤–æ—Ä–∏—Ç—å –ø–∞–ø–∫—É {project}-{version}/ –∑ data.yaml
    data_yaml = Path(dataset.location) / "data.yaml"
    if not data_yaml.exists():
        raise FileNotFoundError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ data.yaml —É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–º—É –¥–∞—Ç–∞—Å–µ—Ç—ñ Roboflow.")
    return str(data_yaml)

def count_images_in_yolo_split(data_root: Path) -> int:
    # –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —É images/train + images/val (–∞–±–æ —Ç—ñ–ª—å–∫–∏ train, —è–∫—â–æ —Ç—Ä–µ–±–∞)
    total = 0
    for sub in ["images/train", "images/val"]:
        p = data_root / sub
        if p.exists():
            total += sum(1 for f in p.rglob("*") if f.suffix.lower() in {".jpg", ".jpeg", ".png", ".bmp"} )
    return total

# -------- Main --------
def main():
    load_dotenv()  # –ø—ñ–¥—Ö–æ–ø–∏—Ç—å .env, —è–∫—â–æ —î

    parser = argparse.ArgumentParser(description="Auto-download dataset (Roboflow if provided, else COCO128) and train YOLOv8.")
    parser.add_argument("--epochs", type=int, default=30, help="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ø–æ—Ö (30 ‚Äî –æ–∫ –¥–ª—è –¥–µ–º–æ).")
    parser.add_argument("--imgsz", type=int, default=640, help="–†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
    parser.add_argument("--batch", type=int, default=16, help="Batch size.")
    parser.add_argument("--device", type=str, default="", help="'' –∞–≤—Ç–æ | 'cpu' | '0' –¥–ª—è GPU.")
    parser.add_argument("--model", type=str, default="yolov8n.pt", help="–°—Ç–∞—Ä—Ç–æ–≤–∞ –º–æ–¥–µ–ª—å (n/s/m/l/x).")
    parser.add_argument("--predict_dir", type=str, default="./examples", help="–ü–∞–ø–∫–∞ –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏ –¥–ª—è —ñ–Ω—Ñ–µ—Ä–µ–Ω—Å—É.")
    parser.add_argument("--conf", type=float, default=0.25, help="–ü–æ—Ä—ñ–≥ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ –¥–ª—è —ñ–Ω—Ñ–µ—Ä–µ–Ω—Å—É.")
    # –ú–æ–∂–Ω–∞ —ñ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∏, —è–∫—â–æ –Ω–µ —Ö–æ—á–µ—à .env
    parser.add_argument("--rf_api_key", type=str, default=os.getenv("ROBOFLOW_API_KEY"))
    parser.add_argument("--rf_workspace", type=str, default=os.getenv("ROBOFLOW_WORKSPACE"))
    parser.add_argument("--rf_project", type=str, default=os.getenv("ROBOFLOW_PROJECT"))
    parser.add_argument("--rf_version", type=str, default=os.getenv("ROBOFLOW_VERSION"))
    args = parser.parse_args()

    # 1) –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö
    use_roboflow = all([args.rf_api_key, args.rf_workspace, args.rf_project, args.rf_version])

    if use_roboflow:
        print("[INFO] –í–∏—è–≤–ª–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ Roboflow: –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–∞—Ç–∞—Å–µ—Ç...")
        data_yaml = try_download_with_roboflow(
            api_key=args.rf_api_key,
            workspace=args.rf_workspace,
            project=args.rf_project,
            version=args.rf_version,
        )
        data_root = Path(data_yaml).parent
        total_imgs = count_images_in_yolo_split(data_root)
        print(f"[INFO] –ó–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å —É train+val: {total_imgs}")
        if total_imgs < 100:
            print("[WARN] –£ –¥–∞—Ç–∞—Å–µ—Ç—ñ < 100 –∑–æ–±—Ä–∞–∂–µ–Ω—å. –î–ª—è –≤–∏–º–æ–≥–∏ –º—ñ–Ω—ñ–º—É–º 100 –∫—Ä–∞—â–µ –¥–æ–¥–∞—Ç–∏ –¥–∞–Ω–∏—Ö –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –≤–µ—Ä—Å—ñ—é –≤ Roboflow.")
    else:
        # 2) –§–æ–ª–±–µ–∫: COCO128 ‚Äî Ultralytics —Å–∞–º –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å –ø—Ä–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—ñ
        print("[INFO] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ Roboflow –Ω–µ –∑–∞–¥–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é COCO128 (–±—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ).")
        # Ultralytics –≤–∂–µ –∑–Ω–∞—î —à–ª—è—Ö –¥–æ coco128.yaml –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –ø–∞–∫–µ—Ç—É
        # –º–æ–¥–µ–ª—å —Å–∞–º–∞ –ø—ñ–¥—Ç—è–≥–Ω–µ –∞—Ä—Ö—ñ–≤ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É train
        data_yaml = "coco128.yaml"

    # 3) –ù–∞–≤—á–∞–Ω–Ω—è
    model = YOLO(args.model)
    print("[INFO] –ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è...")
    model.train(
        data=data_yaml,
        epochs=args.epochs,
        imgsz=args.imgsz,
        batch=args.batch,
        device=args.device,
        project="runs/train",
        name="auto_dataset_yolov8"
    )

    # 4) –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    print("[INFO] –í–∞–ª—ñ–¥–∞—Ü—ñ—è...")
    model.val(data=data_yaml, imgsz=args.imgsz, device=args.device)

    # 5) –Ü–Ω—Ñ–µ—Ä–µ–Ω—Å (—è–∫—â–æ —î –ø—Ä–∏–∫–ª–∞–¥–∏)
    pred_dir = Path(args.predict_dir)
    if pred_dir.exists():
        print(f"[INFO] –Ü–Ω—Ñ–µ—Ä–µ–Ω—Å –Ω–∞ {pred_dir} ...")
        model.predict(
            source=str(pred_dir),
            conf=args.conf,
            imgsz=args.imgsz,
            device=args.device,
            save=True,
            project="runs/predict",
            name="auto_dataset_yolov8"
        )
        print("[OK] –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —ñ–Ω—Ñ–µ—Ä–µ–Ω—Å—É: runs/predict/auto_dataset_yolov8")
    else:
        print(f"[WARN] –ü–∞–ø–∫—É –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ({pred_dir}). –ü—Ä–æ–ø—É—Å–∫–∞—é —ñ–Ω—Ñ–µ—Ä–µ–Ω—Å.")

    print("[DONE] –ì–æ—Ç–æ–≤–æ! –ù–∞–π–∫—Ä–∞—â—ñ –≤–∞–≥–∏: runs/train/auto_dataset_yolov8/weights/best.pt")


if __name__ == "__main__":
    main()


# ================= –ó–í–Ü–¢ =================
# –ü—Ä–æ–≥—Ä–∞–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–∞–≤—á–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ (–¥–∞—Ç–∞—Å–µ—Ç COCO128 –∞–±–æ –≤–ª–∞—Å–Ω–∏–π –Ω–∞–±—ñ—Ä –∑ Roboflow)
# —ñ –Ω–∞–≤—á–∞—î –º–æ–¥–µ–ª—å YOLOv8 –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –æ–±‚Äô—î–∫—Ç—ñ–≤ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è—Ö.

# –ü—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:
# - –í—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞—Ç–∞—Å–µ—Ç—É –∑ –ø–æ–Ω–∞–¥ 100 –∑–æ–±—Ä–∞–∂–µ–Ω—å.
# - –ú–æ–¥–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ—Å –Ω–∞–≤—á–∞–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º –∑–∞–¥–∞–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –µ–ø–æ—Ö.
# - –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ñ–æ—Ä–º—É—î—Ç—å—Å—è –≥–æ—Ç–æ–≤–∞ –Ω–∞–≤—á–µ–Ω–∞ –º–æ–¥–µ–ª—å (best.pt), 
#   —è–∫–∞ –∑–¥–∞—Ç–Ω–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ –æ–±‚Äô—î–∫—Ç–∏ –Ω–∞ –Ω–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è—Ö.
# - –£ –ø–∞–ø—Ü—ñ runs/train/... –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≥—Ä–∞—Ñ—ñ–∫–∏, –∑–≤—ñ—Ç–∏ —Ç–∞ –≤–∞–≥–∏ –º–æ–¥–µ–ª—ñ.
# - –ü—Ä–æ–≥—Ä–∞–º–∞ —Ç–∞–∫–æ–∂ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è (—ñ–Ω—Ñ–µ—Ä–µ–Ω—Å) –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è—Ö 
#   —ñ –∑–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É –ø–∞–ø—Ü—ñ runs/predict/...

# –û—Ç–∂–µ, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ —Ä–æ–±–æ—Ç–∏ –º–∏ –æ—Ç—Ä–∏–º—É—î–º–æ:
# 1. –ù–∞–≤—á–µ–Ω—É –Ω–µ–π—Ä–æ–Ω–Ω—É –º–µ—Ä–µ–∂—É YOLOv8 (best.pt);
# 2. –ì—Ä–∞—Ñ—ñ–∫–∏ –∑–º—ñ–Ω–∏ —Ç–æ—á–Ω–æ—Å—Ç—ñ, –ø–æ–≤–Ω–æ—Ç–∏ —Ç–∞ –≤—Ç—Ä–∞—Ç –ø—ñ–¥ —á–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è;
# 3. –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–º–∏ –æ–±‚Äô—î–∫—Ç–∞–º–∏ —è–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é —Ä–æ–±–æ—Ç–∏ –º–æ–¥–µ–ª—ñ.

# –ü—Ä–æ–≥—Ä–∞–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –ø–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏ –∑ –Ω–µ–π—Ä–æ–Ω–Ω–æ—é –º–µ—Ä–µ–∂–µ—é:
# –≤—ñ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ –Ω–∞–≤—á–∞–Ω–Ω—è ‚Äî –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ, –∑–¥–∞—Ç–Ω–æ—ó —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ –æ–±‚Äô—î–∫—Ç–∏.
# ========================================

###################### Homework machine learning #########################


